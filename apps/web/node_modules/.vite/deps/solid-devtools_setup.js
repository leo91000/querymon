import {
  $RAW,
  DEV as DEV2,
  unwrap
} from "./chunk-XCWN7H2K.js";
import {
  $DEVCOMP,
  $PROXY,
  $TRACK,
  DEV,
  getListener,
  getOwner,
  sharedConfig,
  untrack
} from "./chunk-ZRV3NALM.js";

// ../../node_modules/.pnpm/@solid-devtools+shared@0.20.0_solid-js@1.9.9/node_modules/@solid-devtools/shared/dist/chunk-DTKGRNV6.js
function assert(condition, message, cause) {
  if (!condition) {
    throw Error(message ?? "Assertion failed", { cause });
  }
}
var LOG_LABEL_CYAN = `\x1B[1;30m\x1B[46msolid-devtools\x1B[0m`;
function error(message, ...args) {
  console.error(LOG_LABEL_CYAN + " " + message, ...args);
  return;
}

// ../../node_modules/.pnpm/@solid-devtools+debugger@0.28.1_solid-js@1.9.9/node_modules/@solid-devtools/debugger/dist/setup.js
var dom_element_interface = {
  isElement: (obj) => obj instanceof Element,
  getElementAt: (e) => e.target,
  getName: (el) => el.localName,
  getChildren: (el) => el.children,
  getParent: (el) => el.parentElement,
  getRect: (el) => el.getBoundingClientRect(),
  getLocation: (el) => {
    let attr = getLocationAttr(el);
    return attr && parseLocationString(attr) || null;
  }
};
var LOCATION_ATTRIBUTE_NAME = "data-source-loc";
var LOC_ATTR_REGEX_WIN = /^((?:\\?[^\s][^/\\:\"\?\*<>\|]+)+):([0-9]+):([0-9]+)$/;
var LOC_ATTR_REGEX_UNIX = /^((?:(?:\.\/|\.\.\/|\/)?(?:\.?\w+\/)*)(?:\.?\w+\.?\w+)):([0-9]+):([0-9]+)$/;
function getLocationAttr(element) {
  let attr = element.getAttribute(LOCATION_ATTRIBUTE_NAME);
  if (!attr) return null;
  let is_windows = /(win32|win64|windows|wince)/i.test(navigator.userAgent);
  let regex = is_windows ? LOC_ATTR_REGEX_WIN : LOC_ATTR_REGEX_UNIX;
  return regex.test(attr) ? attr : null;
}
function parseLocationString(location) {
  let [file, line, column] = location.split(":");
  if (file && line && column && typeof file === "string" && !isNaN(line = +line) && !isNaN(column = +column)) {
    return { file, line, column };
  }
}
function setLocatorOptions(options) {
  assert(globalThis.SolidDevtools$$, "solid-devtools is not setup");
  globalThis.SolidDevtools$$.locator_options = options;
}
function setElementInterface(eli) {
  assert(globalThis.SolidDevtools$$, "solid-devtools is not setup");
  globalThis.SolidDevtools$$.eli = eli;
}
function setClientVersion(version) {
  assert(globalThis.SolidDevtools$$, "solid-devtools is not setup");
  globalThis.SolidDevtools$$.versions.client = version;
}
function setSolidVersion(version, expected) {
  assert(globalThis.SolidDevtools$$, "solid-devtools is not setup");
  globalThis.SolidDevtools$$.versions.solid = version;
  globalThis.SolidDevtools$$.versions.expected_solid = expected;
}
if (globalThis.SolidDevtools$$) {
  error("Debugger is already setup");
}
if (!DEV || !DEV2) {
  error("SolidJS in not in development mode!");
} else {
  let created_owners = [];
  let setup = {
    solid: {
      ...DEV,
      getOwner,
      getListener,
      untrack,
      $PROXY,
      $TRACK,
      $DEVCOMP,
      sharedConfig
    },
    store: {
      ...DEV2,
      unwrap,
      $RAW
    },
    get_created_owners() {
      const events = created_owners ?? [];
      created_owners = null;
      return events;
    },
    eli: dom_element_interface,
    locator_options: null,
    get_locator_options() {
      return this.locator_options;
    },
    versions: {
      client: null,
      solid: null,
      expected_solid: null,
      get_client() {
        return this.client;
      },
      get_solid() {
        return this.solid;
      },
      get_expected_solid() {
        return this.expected_solid;
      }
    },
    unowned: {
      signals: [],
      onSignalAdded: null,
      onSignalRemoved: null
    }
  };
  globalThis.SolidDevtools$$ = setup;
  DEV.hooks.afterCreateOwner = (owner) => {
    created_owners?.push(owner);
  };
  let signals_registry = new FinalizationRegistry((ref) => {
    let idx = setup.unowned.signals.indexOf(ref);
    setup.unowned.signals.splice(idx, 1);
    setup.unowned.onSignalRemoved?.(ref, idx);
  });
  DEV.hooks.afterCreateSignal = (signal) => {
    if (getOwner() == null) {
      let ref = new WeakRef(signal);
      let idx = setup.unowned.signals.push(ref) - 1;
      signals_registry.register(signal, ref);
      setup.unowned.onSignalAdded?.(ref, idx);
    }
  };
}

// ../../node_modules/.pnpm/solid-devtools@0.34.3_solid-js@1.9.9_vite@7.1.4_jiti@2.5.1_lightningcss@1.30.1_yaml@2.6.1_/node_modules/solid-devtools/dist/chunk-N4OP67GQ.js
setClientVersion("0.34.3");
setSolidVersion("1.9.7", "1.9.0");
export {
  setElementInterface,
  setLocatorOptions
};
//# sourceMappingURL=solid-devtools_setup.js.map
